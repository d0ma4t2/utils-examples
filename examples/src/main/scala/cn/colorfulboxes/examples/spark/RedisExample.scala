package cn.colorfulboxes.examples.spark

import cn.colorfulboxes.utils.spark.SparkUtil
import com.redislabs.provider.redis._
import com.redislabs.provider.redis.streaming._
import org.apache.spark.SparkContext
import org.apache.spark.sql.SparkSession
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}

/**
 * https://github.com/RedisLabs/spark-redis
 */
object RedisExample {

  def main(args: Array[String]): Unit = {

    val spark: SparkSession = SparkUtil.getSpark(this.getClass.getSimpleName, config = Map(
      "spark.redis.host" -> "localhost",
      "spark.redis.port" -> "6379"
      //      "spark.redis.auth" -> ""
    ))

    val sc: SparkContext = spark.sparkContext

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RDD(Keys)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //    val keysRDD = sc.fromRedisKeyPattern("foo*", 5)
    //    val keysRDD = sc.fromRedisKeys(Array("foo", "bar"), 5)

    //    import spark.implicits._
    //      keysRDD.toDF
    //      .write
    //      .format("org.apache.spark.sql.redis")
    //      .option("table", "foo")
    //      .save()

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RDD(Strings)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //    val stringRDD = sc.fromRedisKV("keyPattern*")
    //    val stringRDD = sc.fromRedisKV(Array("foo", "bar"))

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RDD(Hashes)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //    val hashRDD = sc.fromRedisHash("keyPattern*")
    //    val hashRDD = sc.fromRedisHash(Array("foo", "bar"))

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RDD(Lists)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //    val listRDD = sc.fromRedisList("keyPattern*")
    //    val listRDD = sc.fromRedisList(Array("foo", "bar"))

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RDD(Sets)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //    val setRDD = sc.fromRedisSet("keyPattern*")
    //    val setRDD = sc.fromRedisSet(Array("foo", "bar"))

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RDD(Sorted Sets)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //    val zsetRDD = sc.fromRedisZSetWithScore("keyPattern*")
    //    val zsetRDD = sc.fromRedisZSetWithScore(Array("foo", "bar"))
    //    val zsetRDD = sc.fromRedisZSet("keyPattern*")
    //    val zsetRDD = sc.fromRedisZSet(Array("foo", "bar"))

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// streamBulkPut
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }
}
